// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: user/sys/sys.proto

package sys

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysService_GetAnnouncement_FullMethodName = "/sys.SysService/GetAnnouncement"
)

// SysServiceClient is the client API for SysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysServiceClient interface {
	GetAnnouncement(ctx context.Context, in *AnnouncementReq, opts ...grpc.CallOption) (*AnnouncementRes, error)
}

type sysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysServiceClient(cc grpc.ClientConnInterface) SysServiceClient {
	return &sysServiceClient{cc}
}

func (c *sysServiceClient) GetAnnouncement(ctx context.Context, in *AnnouncementReq, opts ...grpc.CallOption) (*AnnouncementRes, error) {
	out := new(AnnouncementRes)
	err := c.cc.Invoke(ctx, SysService_GetAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServiceServer is the server API for SysService service.
// All implementations must embed UnimplementedSysServiceServer
// for forward compatibility
type SysServiceServer interface {
	GetAnnouncement(context.Context, *AnnouncementReq) (*AnnouncementRes, error)
	mustEmbedUnimplementedSysServiceServer()
}

// UnimplementedSysServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSysServiceServer struct {
}

func (UnimplementedSysServiceServer) GetAnnouncement(context.Context, *AnnouncementReq) (*AnnouncementRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedSysServiceServer) mustEmbedUnimplementedSysServiceServer() {}

// UnsafeSysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServiceServer will
// result in compilation errors.
type UnsafeSysServiceServer interface {
	mustEmbedUnimplementedSysServiceServer()
}

func RegisterSysServiceServer(s grpc.ServiceRegistrar, srv SysServiceServer) {
	s.RegisterService(&SysService_ServiceDesc, srv)
}

func _SysService_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServiceServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysService_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServiceServer).GetAnnouncement(ctx, req.(*AnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysService_ServiceDesc is the grpc.ServiceDesc for SysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.SysService",
	HandlerType: (*SysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnnouncement",
			Handler:    _SysService_GetAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/sys/sys.proto",
}

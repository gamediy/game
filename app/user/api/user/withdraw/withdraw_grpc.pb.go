// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: user/withdraw/withdraw.proto

package withdraw

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WithdrawService_BindWithdrawAccount_FullMethodName = "/withdraw.WithdrawService/BindWithdrawAccount"
	WithdrawService_CreateWithdraw_FullMethodName      = "/withdraw.WithdrawService/CreateWithdraw"
)

// WithdrawServiceClient is the client API for WithdrawService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawServiceClient interface {
	// bind withdraw account
	BindWithdrawAccount(ctx context.Context, in *BindWithdrawAccountReq, opts ...grpc.CallOption) (*BindWithdrawAccountRes, error)
	// create withdraw
	CreateWithdraw(ctx context.Context, in *CreateWithdrawReq, opts ...grpc.CallOption) (*CreateWithdrawRes, error)
}

type withdrawServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawServiceClient(cc grpc.ClientConnInterface) WithdrawServiceClient {
	return &withdrawServiceClient{cc}
}

func (c *withdrawServiceClient) BindWithdrawAccount(ctx context.Context, in *BindWithdrawAccountReq, opts ...grpc.CallOption) (*BindWithdrawAccountRes, error) {
	out := new(BindWithdrawAccountRes)
	err := c.cc.Invoke(ctx, WithdrawService_BindWithdrawAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawServiceClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawReq, opts ...grpc.CallOption) (*CreateWithdrawRes, error) {
	out := new(CreateWithdrawRes)
	err := c.cc.Invoke(ctx, WithdrawService_CreateWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawServiceServer is the server API for WithdrawService service.
// All implementations must embed UnimplementedWithdrawServiceServer
// for forward compatibility
type WithdrawServiceServer interface {
	// bind withdraw account
	BindWithdrawAccount(context.Context, *BindWithdrawAccountReq) (*BindWithdrawAccountRes, error)
	// create withdraw
	CreateWithdraw(context.Context, *CreateWithdrawReq) (*CreateWithdrawRes, error)
	mustEmbedUnimplementedWithdrawServiceServer()
}

// UnimplementedWithdrawServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawServiceServer struct {
}

func (UnimplementedWithdrawServiceServer) BindWithdrawAccount(context.Context, *BindWithdrawAccountReq) (*BindWithdrawAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindWithdrawAccount not implemented")
}
func (UnimplementedWithdrawServiceServer) CreateWithdraw(context.Context, *CreateWithdrawReq) (*CreateWithdrawRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedWithdrawServiceServer) mustEmbedUnimplementedWithdrawServiceServer() {}

// UnsafeWithdrawServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawServiceServer will
// result in compilation errors.
type UnsafeWithdrawServiceServer interface {
	mustEmbedUnimplementedWithdrawServiceServer()
}

func RegisterWithdrawServiceServer(s grpc.ServiceRegistrar, srv WithdrawServiceServer) {
	s.RegisterService(&WithdrawService_ServiceDesc, srv)
}

func _WithdrawService_BindWithdrawAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindWithdrawAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).BindWithdrawAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_BindWithdrawAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).BindWithdrawAccount(ctx, req.(*BindWithdrawAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawService_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawServiceServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WithdrawService_CreateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawServiceServer).CreateWithdraw(ctx, req.(*CreateWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawService_ServiceDesc is the grpc.ServiceDesc for WithdrawService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "withdraw.WithdrawService",
	HandlerType: (*WithdrawServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindWithdrawAccount",
			Handler:    _WithdrawService_BindWithdrawAccount_Handler,
		},
		{
			MethodName: "CreateWithdraw",
			Handler:    _WithdrawService_CreateWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/withdraw/withdraw.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: book/english/english.proto

package english

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnglishService_GetEnglish_FullMethodName = "/english.EnglishService/GetEnglish"
)

// EnglishServiceClient is the client API for EnglishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnglishServiceClient interface {
	GetEnglish(ctx context.Context, in *TestEnReq, opts ...grpc.CallOption) (*TestEnRes, error)
}

type englishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnglishServiceClient(cc grpc.ClientConnInterface) EnglishServiceClient {
	return &englishServiceClient{cc}
}

func (c *englishServiceClient) GetEnglish(ctx context.Context, in *TestEnReq, opts ...grpc.CallOption) (*TestEnRes, error) {
	out := new(TestEnRes)
	err := c.cc.Invoke(ctx, EnglishService_GetEnglish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnglishServiceServer is the server API for EnglishService service.
// All implementations must embed UnimplementedEnglishServiceServer
// for forward compatibility
type EnglishServiceServer interface {
	GetEnglish(context.Context, *TestEnReq) (*TestEnRes, error)
	mustEmbedUnimplementedEnglishServiceServer()
}

// UnimplementedEnglishServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnglishServiceServer struct {
}

func (UnimplementedEnglishServiceServer) GetEnglish(context.Context, *TestEnReq) (*TestEnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnglish not implemented")
}
func (UnimplementedEnglishServiceServer) mustEmbedUnimplementedEnglishServiceServer() {}

// UnsafeEnglishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnglishServiceServer will
// result in compilation errors.
type UnsafeEnglishServiceServer interface {
	mustEmbedUnimplementedEnglishServiceServer()
}

func RegisterEnglishServiceServer(s grpc.ServiceRegistrar, srv EnglishServiceServer) {
	s.RegisterService(&EnglishService_ServiceDesc, srv)
}

func _EnglishService_GetEnglish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnglishServiceServer).GetEnglish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnglishService_GetEnglish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnglishServiceServer).GetEnglish(ctx, req.(*TestEnReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EnglishService_ServiceDesc is the grpc.ServiceDesc for EnglishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnglishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "english.EnglishService",
	HandlerType: (*EnglishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnglish",
			Handler:    _EnglishService_GetEnglish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book/english/english.proto",
}

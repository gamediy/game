syntax = "proto3";
option go_package = ".;withdraw";
package withdraw;
//  pay password status
message PayPassStatusReq{
  int64 uid = 1;
}
message PayPassStatusRes{
  string status = 1; // 0 not set , 1 already set
}

// set pay password
message SetPayPassReq{
  int64 uid = 1;
  string pass = 2;
}
message SetPayPassRes{}

// bind withdraw account
message BindWithdrawAccountReq {
  int64 bankId = 1; // bank id
  string address = 2; // card number
  string title = 3; // cardholder
  string pass = 4; // pay pass
  int64  uid = 5;

}
message BindWithdrawAccountRes{}

// list withdraw account
message ListWithdrawAccountReq{
  int64 page = 1;
  int64 size = 2;
  int64 uid = 3;
}
message withdrawAccountItem{
  int64 id = 1;
  string net = 2;
  string protocol = 3;
  int64 uid = 4;
  string account = 5;
}

// del withdraw account
message DelWithdrawAccountReq{
  int64 uid = 1;
  int64 id = 2;
  string payPass = 3;
}
message DelWithdrawAccountRes{}

// create withdraw
message CreateWithdrawReq{
  int64 amountItemId = 1;
  double amount = 2;
  int64 withdrawAccountId = 3;
}
message CreateWithdrawRes{}

service WithdrawService{
  // pay pass status
  rpc PayPassStatus(PayPassStatusReq)returns(PayPassStatusRes);
  // set pay password
  rpc SetPayPass(SetPayPassReq)returns(SetPayPassRes);
  // bind withdraw account
  rpc BindWithdrawAccount(BindWithdrawAccountReq)returns(BindWithdrawAccountRes);
  // del withdraw account
  rpc DelWithdrawAccount(DelWithdrawAccountReq)returns(DelWithdrawAccountRes);
  // create withdraw
  rpc CreateWithdraw(CreateWithdrawReq)returns(CreateWithdrawRes);
}
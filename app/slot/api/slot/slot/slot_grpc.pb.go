// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: lottery/lottery/lottery.proto

package slot

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SlotService_Spin_FullMethodName     = "/lottery.SlotService/Spin"
	SlotService_CheckWon_FullMethodName = "/lottery.SlotService/CheckWon"
)

// SlotServiceClient is the client API for SlotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlotServiceClient interface {
	Spin(ctx context.Context, in *SpinReq, opts ...grpc.CallOption) (*SpinRes, error)
	CheckWon(ctx context.Context, in *CheckWonReq, opts ...grpc.CallOption) (*CheckWonRes, error)
}

type slotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlotServiceClient(cc grpc.ClientConnInterface) SlotServiceClient {
	return &slotServiceClient{cc}
}

func (c *slotServiceClient) Spin(ctx context.Context, in *SpinReq, opts ...grpc.CallOption) (*SpinRes, error) {
	out := new(SpinRes)
	err := c.cc.Invoke(ctx, SlotService_Spin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotServiceClient) CheckWon(ctx context.Context, in *CheckWonReq, opts ...grpc.CallOption) (*CheckWonRes, error) {
	out := new(CheckWonRes)
	err := c.cc.Invoke(ctx, SlotService_CheckWon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlotServiceServer is the server API for SlotService service.
// All implementations must embed UnimplementedSlotServiceServer
// for forward compatibility
type SlotServiceServer interface {
	Spin(context.Context, *SpinReq) (*SpinRes, error)
	CheckWon(context.Context, *CheckWonReq) (*CheckWonRes, error)
	mustEmbedUnimplementedSlotServiceServer()
}

// UnimplementedSlotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSlotServiceServer struct {
}

func (UnimplementedSlotServiceServer) Spin(context.Context, *SpinReq) (*SpinRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spin not implemented")
}
func (UnimplementedSlotServiceServer) CheckWon(context.Context, *CheckWonReq) (*CheckWonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWon not implemented")
}
func (UnimplementedSlotServiceServer) mustEmbedUnimplementedSlotServiceServer() {}

// UnsafeSlotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlotServiceServer will
// result in compilation errors.
type UnsafeSlotServiceServer interface {
	mustEmbedUnimplementedSlotServiceServer()
}

func RegisterSlotServiceServer(s grpc.ServiceRegistrar, srv SlotServiceServer) {
	s.RegisterService(&SlotService_ServiceDesc, srv)
}

func _SlotService_Spin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotServiceServer).Spin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlotService_Spin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotServiceServer).Spin(ctx, req.(*SpinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlotService_CheckWon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlotServiceServer).CheckWon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlotService_CheckWon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlotServiceServer).CheckWon(ctx, req.(*CheckWonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SlotService_ServiceDesc is the grpc.ServiceDesc for SlotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lottery.SlotService",
	HandlerType: (*SlotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spin",
			Handler:    _SlotService_Spin_Handler,
		},
		{
			MethodName: "CheckWon",
			Handler:    _SlotService_CheckWon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lottery/lottery/lottery.proto",
}
